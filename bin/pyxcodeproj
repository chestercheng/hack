#!/usr/bin/env python3


from __future__ import absolute_import, division, print_function


from uuid import getnode as get_mac
import hashlib
import time
import sys
import os
import argparse
import logging


def uid_generator():
    digest = hashlib.blake2b(b"%012X"%get_mac(), digest_size=4)
    machine_code = digest.hexdigest().upper()
    serial = 0
    last_second = 0
    while True:
        second = int(time.time())
        if last_second != second:
            last_second = second
            serial = 0
        else:
            serial += 1
        uid = machine_code + ("%08X" % second) + ("%08X" % serial)
        yield uid
uid_generator = uid_generator()

def new_uid():
    return next(uid_generator)


class XcodeObject(object):
    def __init__(self, *args, **kw):
        super(XcodeObject, self).__init__()
        self._uid = new_uid()

    @property
    def uid(self):
        return self._uid

    def __str__(self):
        return self.uid


class FsItem(XcodeObject):
    def __init__(self, name, path):
        super(FsItem, self).__init__(name, path)
        self.name = name
        self.path = path

    @property
    def referenced_in_group(self):
        return "%s /* %s */" % (self.uid, self.name)


class File(FsItem):
    _type_map = {
        ".c": "sourcecode.c.c",
        ".h": "sourcecode.c.h",
    }

    @property
    def file_type(self):
        return self._type_map[os.path.splitext(self.name)[-1]]

    def __str__(self):
        return (
            "\t\t%s /* %s */ = {"
            "isa = PBXFileReference; "
            "lastKnownFileType = %s; "
            "path = %s; "
            "sourceTree = \"<group>\"; };" % (
                self.uid, self.name, self.file_type, self.name))


class TargetExec(FsItem):
    def __init__(self, name):
        super(TargetExec, self).__init__(name, name)

    def __str__(self):
        return (
            "\t\t%s /* %s */ = {"
            "isa = PBXFileReference; "
            "explicitFileType = \"compiled.mach-o.executable\"; "
            "includeInIndex = 0; "
            "path = \"%s\"; "
            "sourceTree = BUILT_PRODUCTS_DIR; };" % (
                self.uid, self.name, self.name))


class BuildFile(XcodeObject):
    def __init__(self, file):
        super(BuildFile, self).__init__()
        self.file = file

    @property
    def name(self):
        return self.file.name

    def __str__(self):
        return (
            "\t\t%s /* %s */ = {"
            "isa = PBXBuildFile; "
            "fileRef = %s "
            "/* %s */; };" % (
                self.uid, self.name, self.file.uid, self.name))


class Group(FsItem):
    def __init__(self, name, path, children=None):
        super(Group, self).__init__(name, path)
        self.children = children if children else list()

    @staticmethod
    def from_directory(directory, chroot=None, extensions=None):
        if extensions is None:
            extensions = list()
        if chroot is None:
            chroot = directory
        folders = {directory: Group(directory.split(os.sep)[-1], chroot)}
        for root, dnames, fnames in os.walk(directory):
            tail = root.split(os.sep)[-1]
            for dname in dnames:
                parent = folders.setdefault(root, Group(tail, tail))
                cpath = os.path.join(root, dname)
                child = folders.setdefault(cpath, Group(dname, dname))
                parent.children.append(child)
            for fname in fnames:
                main, ext = os.path.splitext(fname)
                if ext in extensions:
                    parent = folders.setdefault(root, Group(tail, tail))
                    child = File(fname, os.path.join(root, fname))
                    parent.children.append(child)
        return folders[directory]

    def __str__(self):
        lines = list()
        if self.name:
            lines.append("\t\t%s /* %s */ = {" % (self.uid, self.name))
        else:
            lines.append("\t\t%s = {" % self.uid)
        lines.append("\t\t\tisa = PBXGroup;")
        lines.append("\t\t\tchildren = (")
        for child in self.children:
            lines.append("\t\t\t\t%s," % child.referenced_in_group)
        lines.append("\t\t\t);")
        if self.name:
            lines.append("\t\t\tname = %s;" % self.name)
        if self.path:
            lines.append("\t\t\tpath = %s;" % self.path)
        lines.append("\t\t\tsourceTree = \"<group>\";")
        lines.append("\t\t};")
        return "\n".join(lines)

    def all_groups(self):
        groups = list()
        for child in self.children:
            try:
                subgroups = child.all_groups()
            except AttributeError:
                continue
            groups.extend(it for it in subgroups if isinstance(it, Group))
        groups.insert(0, self)
        return groups

    def all_files(self):
        files = [it for it in self.children if isinstance(it, File)]
        for child in self.children:
            try:
                subfiles = child.all_files()
            except AttributeError:
                continue
            files.extend(it for it in subfiles if isinstance(it, File))
        return files

    def derive_build_files(self):
        return [BuildFile(f) for f in
                self.all_files() if f.name.endswith(".c")]


class BuildConfig(XcodeObject):
    def __init__(self, name, include_paths=None):
        super(BuildConfig, self).__init__()
        self.name = name
        self.include_paths = include_paths if include_paths else []

    def __str__(self):
        lines = list()
        lines.append("\t\t%s /* %s */ = {" % (self.uid, self.name))
        lines.append("\t\t\tisa = XCBuildConfiguration;")
        lines.append("\t\t\tbuildSettings = {")

        if self.include_paths:
            lines.append("\t\t\t\tOTHER_CFLAGS = (")
            for inc in self.include_paths:
                lines.append("\t\t\t\t\t\"-I%s\"," % inc)
            lines.append("\t\t\t\t);")
            lines.append("\t\t\t\tPRODUCT_NAME = \"$(TARGET_NAME)\";")

        lines.append("\t\t\t};")
        lines.append("\t\t\tname = %s;" % self.name)
        lines.append("\t\t};")
        return "\n".join(lines)


class ConfigList(XcodeObject):
    def __init__(self, configs, name):
        super(ConfigList, self).__init__()
        self.configs = configs if configs else list()
        self.name = name

    def __str__(self):
        lines = list()

        lines.append("\t\t%s /* Build configuration list for %s */ = {"
                     % (self.uid, self.name))
        lines.append("\t\t\tisa = XCConfigurationList;")
        lines.append("\t\t\tbuildConfigurations = (")
        for config in self.configs:
            lines.append("\t\t\t\t%s /* %s */," % (config.uid, config.name))
        lines.append("\t\t\t);")
        lines.append("\t\t\tdefaultConfigurationIsVisible = 0;")
        lines.append("\t\t\tdefaultConfigurationName = %s;" %
                     self.configs[-1].name)
        lines.append("\t\t};")

        return "\n".join(lines)


class SourcePhase(XcodeObject):
    def __init__(self, build_files):
        super(SourcePhase, self).__init__()
        self.build_files = build_files

    def __str__(self):
        lines = list()

        lines.append("/* Begin PBXSourcesBuildPhase section */")
        lines.append("\t\t%s /* Sources */ = {" % self.uid)
        lines.append("\t\t\tisa = PBXSourcesBuildPhase;")
        lines.append("\t\t\tbuildActionMask = 2147483647;")
        lines.append("\t\t\tfiles = (")
        for bf in self.build_files:
            lines.append("\t\t\t\t\t%s /* %s in Sources */," %
                         (bf.uid, bf.name))
        lines.append("\t\t\t);")
        lines.append("\t\t\trunOnlyForDeploymentPostprocessing = 0;")
        lines.append("\t\t};")
        lines.append("/* End PBXSourcesBuildPhase section */")

        return "\n".join(lines)


class NativeTarget(XcodeObject):
    def __init__(self, name, config_list, source_phase):
        super(NativeTarget, self).__init__()
        self.name = name
        self.config_list = config_list
        self.source_phase = source_phase
        self.executable = TargetExec("python-index")

    def __str__(self):
        lines = list()

        lines.append("/* Begin PBXNativeTarget section */")
        lines.append("\t\t%s /* %s */ = {" % (self.uid, self.name))
        lines.append("\t\t\tisa = PBXNativeTarget;")
        lines.append(
                "\t\t\tbuildConfigurationList = %s "
                "/* Build configuration list for PBXNativeTarget \"%s\" */;" %
                (self.config_list.uid, self.name))
        lines.append("\t\t\tbuildPhases = (")
        lines.append("\t\t\t\t%s /* Sources */," % self.source_phase.uid)
        lines.append("\t\t\t);")
        lines.append("\t\t\tbuildRules = (")
        lines.append("\t\t\t);")
        lines.append("\t\t\tdependencies = (")
        lines.append("\t\t\t);")
        lines.append("\t\t\tname = \"%s\";" % self.name)
        lines.append("\t\t\tproductName = \"%s\";" % self.name)
        lines.append("\t\t\tproductReference = %s /* %s */;" %
                     (self.executable.uid, self.executable.name))
        lines.append(
                "\t\t\tproductType = \"com.apple.product-type.tool\";")
        lines.append("\t\t};")
        lines.append("/* End PBXNativeTarget section */")

        return "\n".join(lines)


class PBXProject(XcodeObject):
    def __init__(self, config_list, target, group):
        super(PBXProject, self).__init__()
        self.config_list = config_list
        self.target = target
        self.group = group

    def __str__(self):
        lines = list()

        lines.append("/* Begin PBXBuildFile section */")
        for bfobj in self.target.source_phase.build_files:
            lines.append(str(bfobj))
        lines.append("/* End PBXBuildFile section */")
        lines.append("")

        lines.append("/* Begin PBXFileReference section */")
        lines.append(str(self.target.executable))
        for xfobj in self.group.all_files():
            lines.append(str(xfobj))
        lines.append("/* End PBXFileReference section */")
        lines.append("")

        lines.append("/* Begin PBXGroup section */")
        for group in self.group.all_groups():
            lines.append(str(group))
        lines.append("/* End PBXGroup section */")
        lines.append("")

        lines.append(str(self.target))
        lines.append("")

        lines.append("/* Begin PBXProject section */")
        lines.append("\t\t%s /* Project object */ = {" % self.uid)
        lines.append("\t\t\tisa = PBXProject;")
        lines.append("\t\t\tattributes = {")
        lines.append("\t\t\t\tLastUpgradeCheck = 0830;")
        lines.append("\t\t\t\tTargetAttributes = {")
        lines.append("\t\t\t\t\t%s = {" % self.target.uid)
        lines.append("\t\t\t\t\t\tCreatedOnToolsVersion = 8.3.2;")
        lines.append("\t\t\t\t\t\tProvisioningStyle = Automatic;")
        lines.append("\t\t\t\t\t};")
        lines.append("\t\t\t\t};")
        lines.append("\t\t\t};")
        lines.append("\t\t\tbuildConfigurationList = %s "
                     "/* Build configuration list for PBXProject */;" %
                     self.config_list.uid)
        lines.append("\t\t\tcompatibilityVersion = \"Xcode 3.2\";")
        lines.append("\t\t\tdevelopmentRegion = English;")
        lines.append("\t\t\thasScannedForEncodings = 0;")
        lines.append("\t\t\tknownRegions = (")
        lines.append("\t\t\t\ten,")
        lines.append("\t\t\t);")
        lines.append("\t\t\tmainGroup = %s;" % self.group.uid)
        lines.append("\t\t\tprojectDirPath = \"\";")
        lines.append("\t\t\tprojectRoot = \"\";")
        lines.append("\t\t\ttargets = (")
        lines.append("\t\t\t\t%s /* %s */," %
                     (self.target.uid, self.target.name))
        lines.append("\t\t\t);")
        lines.append("\t\t};")
        lines.append("/* End PBXProject section */")
        lines.append("")

        lines.append(str(self.target.source_phase))
        lines.append("")

        lines.append("/* Begin XCBuildConfiguration section */")
        for config in self.target.config_list.configs:
            lines.append(str(config))
        for config in self.config_list.configs:
            lines.append(str(config))
        lines.append("/* End XCBuildConfiguration section */")
        lines.append("")

        lines.append("/* Begin XCConfigurationList section */")
        lines.append(str(self.target.config_list))
        lines.append(str(self.config_list))
        lines.append("/* End XCConfigurationList section */")

        return "\n".join(lines)


class ProjFile(object):
    def __init__(self, project):
        self.project = project

    def __str__(self):
        lines = list()
        lines.append("// !$*UTF8*$!")
        lines.append("{")
        lines.append("\tarchiveVersion = 1;")
        lines.append("\tclasses = {")
        lines.append("\t};")
        lines.append("\tobjectVersion = 46;")
        lines.append("\tobjects = {")
        lines.append("")
        lines.append(str(self.project))
        lines.append("\t};")
        lines.append("\trootObject = %s /* Project object */;" %
                     self.project.uid)
        lines.append("}")
        return "\n".join(lines)


def make_xcodeproj(pyroot, proj_loc, use_chroot=False):
    if not proj_loc.endswith(".xcodeproj"):
        proj_loc += ".xcodeproj"
    chroot = pyroot
    if not proj_loc.startswith(os.sep):
        depth = len(os.path.split(proj_loc)) - 1
        chroot = os.path.join(*[".."]*depth)
        chroot = os.path.join(chroot, pyroot)
    pyroot = os.path.abspath(pyroot)

    def _make_group(subdir, exts):
        subchroot = os.path.join(chroot, subdir)
        subdir = os.path.join(pyroot, subdir)
        if not use_chroot:
            subchroot = subdir
        return Group.from_directory(subdir, chroot=subchroot, extensions=exts)

    children = list()
    children.append(_make_group("Include", [".h"]))
    children.append(_make_group("Modules", [".h", ".c"]))
    children.append(_make_group("Objects", [".h", ".c"]))
    children.append(_make_group("Parser", [".h", ".c"]))
    children.append(_make_group("Programs", [".h", ".c"]))
    children.append(_make_group("Python", [".h", ".c"]))
    group = Group(None, None, children)
    build_files = group.derive_build_files()
    source_phase = SourcePhase(build_files)

    incpaths = [os.path.join(pyroot, t) for t in 
                ("Include", "Modules", "Objects", "Parser", "Programs",
                 "Python")]
    target_config_list = ConfigList(
        [BuildConfig("Debug", incpaths), BuildConfig("Release", incpaths)],
        name="PBXNativeTarget \"python-index\"",
    )
    target = NativeTarget("python-index", target_config_list, source_phase)
    group.children.append(target.executable)

    project_config_list = ConfigList(
        [BuildConfig("Debug"), BuildConfig("Release")],
        name="PBXProject \"python\"",
    )

    proj = ProjFile(PBXProject(project_config_list, target, group))

    if not os.path.isdir(proj_loc):
        os.makedirs(proj_loc)
    projfn = os.path.join(proj_loc, "project.pbxproj")
    if os.path.exists(projfn):
        logging.warning("%s will be overridden" % projfn)
    with open(projfn, "w") as fobj:
        fobj.write(str(proj))
    logging.info("%s is written" % projfn)


def main():
    YHROOT = os.path.split(__file__)[0]
    YHROOT = os.environ.get("YHROOT", YHROOT)
    parser = argparse.ArgumentParser(
            description='Build Xcode project')
    parser.add_argument("-p", "--py", type=str, dest="pyroot",
                        default=os.path.join(YHROOT, "python"),
                        help="Python source tree.")
    parser.add_argument("-j", "--project", type=str, dest="proj_loc",
                        default=os.path.join(YHROOT, "python.xcodeproj"),
                        help="Xcode project directory.")
    args = parser.parse_args()

    FORMAT = "%(levelname)s: %(filename)s:%(funcName)s() %(message)s"
    logging.basicConfig(format=FORMAT, level=logging.INFO)

    make_xcodeproj(args.pyroot, args.proj_loc)


if __name__ == "__main__":
    main()
